#!/usr/bin/python
from __future__ import (absolute_import,unicode_literals)

# Import community modules.
import os
import sys
import re
from subprocess32 import call
from jinja2 import Template
from termcolor import cprint
from fqdn import FQDN


# Validate path.
def is_path_valid(path):
  if path:
    if os.path.isabs(path):
      return True
    else:
      cprint('Invalid path.','red')
  else:
    cprint('Cannot accept empty path.','red')

# Validate full domain.
def is_full_domain_valid(full_domain):
  if full_domain:
    fqdn = FQDN(full_domain)
    if fqdn.is_valid:
      return True
    else:
      cprint('Invalid full domain.','red')
  else:
    cprint('Cannot accept empty full domain.','red')

# Validate scheme.
def is_scheme_valid(scheme):
  if scheme:
    if scheme=='http' or scheme=='https':
      return True
    else:
      cprint('Invalid scheme.','red')
  else:
    cprint('Cannot accept empty scheme.','red')

# Validate API key identifier.
def is_api_key_identifier_valid(identifier):
  if identifier:
    return True
  else:
    cprint('Cannot accept empty API key identifier.','red')

# Validate API key token.
def is_api_key_token_valid(token):
  if token:
    return True
  else:
    cprint('Cannot accept empty API key token.','red')

# Generate configuration template.
def generate_config(**kwargs):
  if os.path.exists(kwargs['output']) is True:
    call(['chmod','600',kwargs['output']])
  else:
    cprint('Configuration file does not exist.','red')
    sys.exit(1)
  kwargs['template'] = open(kwargs['template'],'r')
  data = kwargs['template'].read()
  kwargs['template'].close()
  template = Template(data)
  output = template.render(vars=kwargs['vars'])
  kwargs['output'] = open(kwargs['output'],'wt')
  kwargs['output'].write(output)
  kwargs['output'].close()


if __name__=='__main__':

  # Run only as sudo/root user.
  if not os.geteuid()==0:
    cprint('Run this command as sudo/root user.','red')
    sys.exit(1)

  config_dir = '/etc/slen'
  vars = {}
  vars['system'] = {}
  vars['system']['base_home_dir'] = str(raw_input('System base home directory (ex: /opt/slen): '))
  if is_path_valid(vars['system']['base_home_dir']) is not True: sys.exit(1)

  vars['account'] = {}
  vars['account']['full_domain'] = str(raw_input('Account full domain (ex: sloopstash-prd.pod-2.sloopengine.io): '))
  if is_full_domain_valid(vars['account']['full_domain']) is not True: sys.exit(1)
  vars['account']['scheme'] = str(raw_input('Account scheme (ex: https/http): '))
  if is_scheme_valid(vars['account']['scheme']) is not True: sys.exit(1)

  vars['user'] = {}
  vars['user']['api_key_identifier'] = str(raw_input('User API key identifier: '))
  if is_api_key_identifier_valid(vars['user']['api_key_identifier']) is not True: sys.exit(1)
  vars['user']['api_key_token'] = str(raw_input('User API key token: '))
  if is_api_key_token_valid(vars['user']['api_key_token']) is not True: sys.exit(1)

  generate_config(
    config_dir=config_dir,
    template=config_dir+'/main.ini.template',
    output=config_dir+'/main.ini',
    vars=vars
  )
